use std::io::Read;

use flate2::{read::ZlibDecoder, bufread::ZlibEncoder, Compression};



fn read_object_data(data: &[u8]) -> Result<Vec<u8>, String> {
    let mut decompressed_data: Vec<u8> = Vec::new();

    let mut zlib_decoder: ZlibDecoder<&[u8]> = ZlibDecoder::new(&data);
    let n = match zlib_decoder.read_to_end(&mut decompressed_data) {
        Ok(n) => n,
        Err(_) => return Err("Error en la descompresion".to_string()),
    };

    if n == 0 {
        return Err("Error en la descompresion, objeto vacio".to_string());
    }
    println!("Decompressed data length: {}", decompressed_data.len());
    println!("n -> {}", n);
    let bytes_read = zlib_decoder.total_in();
    println!("Bytes read: {}", bytes_read);
    Ok(decompressed_data)
}

fn main() {
    println!("Hello, world!");
    let commit_decompressed: Vec<u8> = vec![0x78, 0x9c, 0xa5, 0x8c, 0x41, 0x0e, 0xc2, 0x20, 0x10, 0x45, 0xf7, 0x9c,
    0x82, 0x0b, 0xd8, 0xcc, 0x94, 0x52, 0x68, 0x62, 0x8c, 0xd1, 0x1b, 0x78, 0x83, 0x61, 0x98, 0x5a,
    0x92, 0xb6, 0x18, 0xa4, 0x0b, 0x6f, 0x2f, 0xf1, 0x0a, 0xee, 0xde, 0x7f, 0x3f, 0x79, 0xb5, 0x88,
    0x68, 0x2b, 0x3e, 0x06, 0x67, 0xc9, 0x9a, 0x89, 0x7a, 0x4b, 0x64, 0x90, 0xd1, 0x58, 0x46, 0x17,
    0x00, 0xbc, 0x33, 0xbe, 0x31, 0xd3, 0x08, 0xbd, 0x7a, 0x51, 0x91, 0xbd, 0x6a, 0x19, 0x26, 0x60,
    0x76, 0x48, 0xf3, 0xd0, 0xbe, 0x29, 0x08, 0x7a, 0xb1, 0x18, 0x70, 0x06, 0x86, 0x38, 0xce, 0x63,
    0xe4, 0xe0, 0xd0, 0x48, 0x54, 0x74, 0xd4, 0x25, 0x17, 0x7d, 0x2b, 0xf4, 0xa1, 0x5d, 0x3f, 0x12,
    0xd3, 0x1a, 0x93, 0x3e, 0x87, 0xdf, 0xee, 0x4a, 0xc7, 0x39, 0xaf, 0xd7, 0xe7, 0x46, 0x69, 0x6d,
    0xb8, 0x5d, 0x34, 0x3a, 0xe8, 0x01, 0x46, 0xf0, 0xa8, 0x4f, 0x60, 0x00, 0x54, 0xb3, 0x5b, 0xaa,
    0x55, 0xfe, 0x69, 0xa8, 0xfb, 0x42, 0xc7, 0x3b, 0xa5, 0x9a, 0xd5, 0x17, 0x70, 0x1a, 0x48, 0x51,
    0xa8, 0x04, 0x78, 0x9c, 0x33, 0x34, 0x30, 0x30, 0x33, 0x31, 0x51, 0x48, 0xce, 0x48, 0x2c, 0xd5,
    0x2b, 0xa9, 0x28, 0x61, 0xd8, 0xf8, 0xba, 0xfe, 0x74, 0xf5, 0xd2, 0x7f, 0x9f, 0x9e, 0xfc, 0xb5,
    0x30, 0x91, 0x95, 0x9b, 0xba, 0x33, 0xdf, 0x2a, 0xd5, 0xcb, 0x10, 0xa2, 0x26, 0x23, 0x3f, 0x27,
    0x11, 0xac, 0xa6, 0x6b, 0x72, 0xd5, 0xb5, 0x07, 0x75, 0x4e, 0x9c, 0xfb, 0xab, 0x5e, 0x5c, 0x49,
    0x08, 0x57, 0xdb, 0x6e, 0x7a, 0x88, 0x55, 0x17, 0x00, 0x24, 0xfc, 0x1d, 0xec, 0x3d, 0x78, 0x9c,
    0x73, 0xce, 0x48, 0x2c, 0x2d, 0x2d, 0x2d, 0xce, 0x2c, 0xc9, 0x57, 0xb0, 0xd2, 0x00, 0x00, 0x23,
    0x6d, 0x04, 0xad ];

    let decompressed_data = match read_object_data(&commit_decompressed) {
        Ok(decompressed_data) => decompressed_data,
        Err(e) => {
            println!("Error: {}", e);
            return;
        }
    };
    println!("Commit Decompressed data: {:?}", decompressed_data);

    let tree_decompressed: Vec<u8> = vec![
        0x78,  0x9c,  0x33,  0x34,  0x30,  0x30,  0x33,  0x31,  0x51,  0x48,  0xce,  0x48,  0x2c,  0xd5, 
        0x2b,  0xa9,  0x28,  0x61,  0xd8,  0xf8,  0xba,  0xfe,  0x74,  0xf5,  0xd2,  0x7f,  0x9f,  0x9e,  0xfc,  0xb5, 
        0x30,  0x91,  0x95,  0x9b,  0xba,  0x33,  0xdf,  0x2a,  0xd5,  0xcb,  0x10,  0xa2,  0x26,  0x23,  0x3f,  0x27, 
        0x11,  0xac,  0xa6,  0x6b,  0x72,  0xd5,  0xb5,  0x07,  0x75,  0x4e,  0x9c,  0xfb,  0xab,  0x5e,  0x5c,  0x49, 
        0x08,  0x57,  0xdb,  0x6e,  0x7a,  0x88,  0x55,  0x17,  0x00,  0x24,  0xfc,  0x1d,  0xec,  0x3d,  0x78,  0x9c, 
        0x73,  0xce,  0x48,  0x2c,  0x2d,  0x2d,  0x2d,  0xce,  0x2c,  0xc9,  0x57,  0xb0,  0xd2,  0x00,  0x00,  0x23, 
        0x6d,  0x04,  0xad ]; 
    let decompressed_data = match read_object_data(&tree_decompressed) {
        Ok(decompressed_data) => decompressed_data,
        Err(e) => {
            println!("Error: {}", e);
            return;
        }
    };
    println!("Tree Decompressed data: {:?}", decompressed_data);

    let blob_decompresed: Vec<u8> = vec![0x78, 0x9c,
    0x73, 0xce, 0x48, 0x2c, 0x2d, 0x2d, 0x2d, 0xce, 0x2c, 0xc9, 0x57, 0xb0, 0xd2, 0x00, 0x00, 0x23,
    0x6d, 0x04, 0xad ];
    let decompressed_data = match read_object_data(&blob_decompresed) {
        Ok(decompressed_data) => decompressed_data,
        Err(e) => {
            println!("Error: {}", e);
            return;
        }
    };
    println!("Blob Decompressed data: {:?}", decompressed_data);
    // 3d -> 00111101
    // println!("Tree Decompressed data: {:?}", decompressed_data);

    // let blob_tree_decompressed: Vec<u8> = vec![

    // ];
}
